types acs_dropdown_types {

    type acs_dropdown_selected_value = widget {
		alwaystransparent = no
		block "acs_dropdown_selected_value_size" {
			size = { 100% 100% }
		}

        block "visibility" { }

        button_normal = {
            size = { 100% 33 }
            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            upframe = 1
            overframe = 2
            downframe = 3
            disableframe = 4
            texture = "gfx/interface/buttons/button_drop_down.dds"
            framesize = { 225 33 }
            spriteType = Corneredtiled
            spriteborder = { 75 11 }
            clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
    

            buttonText = {
                text_single = {
                    size = { 100% 100% }
                    autoresize = no
                    margin = { 15 0 }
                    margin_right = 25
                    align = left|nobaseline
                    default_format = "#clickable"

                    block "text_button_drop" {
                        text = "diplomacy"
                    }
                }
            }
        }

    }

    type acs_dropdown_other_value = widget {
        alwaystransparent = no
        block "size_dropdown" {
            size = { 215 33 }
		}
		
		block "acs_dropdown_other_value_visible" {
        }

        button_normal = {
            size = { 100% 30 }
            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
            upframe = 1
            overframe = 2
            downframe = 3
            disableframe = 1
            texture = "gfx/interface/buttons/button_interaction_menu.dds"
            framesize = { 317 30 }
            
        }

        button_normal = {
            block "text_button_drop" {
                text = "diplomacy"
            }
            
            onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.TriggerAnimation('acs_hide_drop')]"

            default_format = "#clickable"

            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
            upframe = 1
            overframe = 2
            downframe = 3
            disableframe = 1
            texture = "gfx/interface/buttons/button_interaction_menu.dds"
            framesize = { 317 30 }
            clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
    
            buttonText = {
                text_single = {
                    size = { 100% 100% }
                    autoresize = no
                    margin_left = 10
                    align = left|nobaseline
                }
            }
        }

    }

    type acs_dropdown_no_order_change = acs_dropdown_base {
        state = {
            name = acs_show_drop
            on_finish = "[PdxGuiWidget.FindChild('acs_dropdown_part').Show]"
            alpha = 1
            duration = 0.1
            next = idle
        }
    }

    type acs_dropdown = acs_dropdown_base {
        state = {
            name = acs_show_drop

            on_finish = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.AccessParent.StackTop]"
            on_finish = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.StackTop]"
            on_finish = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.StackTop]"
            on_finish = "[PdxGuiWidget.AccessParent.AccessParent.StackTop]"
            on_finish = "[PdxGuiWidget.AccessParent.StackTop]"
            on_finish = "[PdxGuiWidget.FindChild('acs_dropdown_part').StackTop]"

            on_finish = "[PdxGuiWidget.FindChild('acs_dropdown_part').Show]"
            alpha = 1
            duration = 0.1
            next = idle
        }
    
    }

    type acs_dropdown_base = widget {
        block "acs_dropdown_size" { 
            size = { 300 33 }
        }

        state = {
            name = idle
            alpha = 1
        }

        state = {
            name = _mouse_hierarchy_leave
            duration = 0
            alpha = 1
            next = acs_hide_drop
        }

        state = {
            name = _mouse_hierarchy_enter
            duration = 0.1
            alpha = 1
            next = acs_show_drop
        }

        state = {
            name = acs_hide_drop_auto
            trigger_when = "[GetVariableSystem.Exists( 'acs_sort_widget_finished' )]"
            duration = 0.1
            alpha = 1
            next = acs_hide_drop
        }

        state = {
            name = acs_hide_drop
            duration = 0.1
            on_finish = "[PdxGuiWidget.FindChild('acs_dropdown_part').Hide]"
            alpha = 1
            next = idle
        }

        
        
        allow_outside = yes
        
        block "acs_dropdown_selected_values" { }

        scrollarea = {
            name = "acs_dropdown_part"
            position = { 5 33 }

            state = {
                name = _show
                using = Animation_FadeIn_Quick
            }
    
            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }


            block "acs_dropdown_scroll_maximumsize" { 
                maximumsize = { 300 250 }
            }
           
            autoresizescrollarea = yes
            scrollbarpolicy_horizontal = always_off

            using = Background_DropDown

            scrollwidget = {
                vbox = {
                    using = Background_DropDown
                    layoutpolicy_vertical = expanding
                    layoutpolicy_horizontal = expanding
                    ignoreinvisible = yes
                    block "acs_dropdown_other_values" {  }
                }
            }

            scrollbar_vertical = {
                using = Scrollbar_Vertical
            }    
        }
        
    }
    

}